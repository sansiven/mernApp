{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRRENT_USER, USER_LOADING } from \"./types\"; //Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(res => history.push(\"/login\")) //redirect to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; //Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    //set and save to local storage\n    const {\n      token\n    } = res.data; //set token to auth header\n\n    setAuthToken(token); //decode token to get user data\n\n    const decoded = jwt_decode(token); //set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; //set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRRENT_USER,\n    payload: decoded\n  };\n}; //User Loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; //Log User Out\n\nexport const logoutUser = () => dispatch => {\n  //remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); //reove auth header from future requests\n\n  setAuthToken(false); //set curent user to empty object which will set isUserAuthenticated to fale\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["D:/2077/mernApp/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","decoded","setCurrentUser","setUserLoading","logoutUser","localStorage","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SACIC,UADJ,EAEIC,iBAFJ,EAGIC,YAHJ,QAIM,SAJN,C,CAMA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC3DT,EAAAA,KAAK,CACDU,IADJ,CACS,qBADT,EACgCH,QADhC,EAEKI,IAFL,CAEUC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFjB,EAEyC;AAFzC,GAGKC,KAHL,CAGYC,GAAG,IAAIN,QAAQ,CAAC;AACpBO,IAAAA,IAAI,EAAEb,UADc;AAEpBc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFF,GAAD,CAH3B;AAOH,CARM,C,CAUP;;AACA,OAAO,MAAMC,SAAS,GAAGb,QAAQ,IAAIE,QAAQ,IAAI;AAC7CT,EAAAA,KAAK,CACAU,IADL,CACU,kBADV,EAC8BH,QAD9B,EAEKI,IAFL,CAEUC,GAAG,IAAI;AACT;AACA,UAAM;AAAES,MAAAA;AAAF,QAAYT,GAAG,CAACO,IAAtB,CAFS,CAGT;;AACAlB,IAAAA,YAAY,CAACoB,KAAD,CAAZ,CAJS,CAKT;;AACA,UAAMC,OAAO,GAAGpB,UAAU,CAACmB,KAAD,CAA1B,CANS,CAOT;;AACAZ,IAAAA,QAAQ,CAACc,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,GAXL,EAYKR,KAZL,CAYWC,GAAG,IAAIN,QAAQ,CAAC;AACnBO,IAAAA,IAAI,EAAEb,UADa;AAEnBc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFH,GAAD,CAZ1B;AAgBH,CAjBM,C,CAmBP;;AACA,OAAO,MAAMI,cAAc,GAAGD,OAAO,IAAI;AACrC,SAAM;AACFN,IAAAA,IAAI,EAAEZ,iBADJ;AAEFa,IAAAA,OAAO,EAAEK;AAFP,GAAN;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAChC,SAAM;AACFR,IAAAA,IAAI,EAAEX;AADJ,GAAN;AAGH,CAJM,C,CAMP;;AACA,OAAO,MAAMoB,UAAU,GAAG,MAAMhB,QAAQ,IAAI;AACxC;AACAiB,EAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB,EAFwC,CAGxC;;AACA1B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJwC,CAKxC;;AACAQ,EAAAA,QAAQ,CAACc,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,CAPM","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport {\r\n    GET_ERRORS,\r\n    SET_CURRRENT_USER,\r\n    USER_LOADING\r\n}from \"./types\";\r\n\r\n//Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n    axios.\r\n        post(\"/api/users/register\", userData)\r\n        .then(res => history.push(\"/login\")) //redirect to login on successful register\r\n        .catch( err => dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        }))\r\n};\r\n\r\n//Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n    axios\r\n        .post(\"/api/users/login\", userData)\r\n        .then(res => {\r\n            //set and save to local storage\r\n            const { token } = res.data;\r\n            //set token to auth header\r\n            setAuthToken(token);\r\n            //decode token to get user data\r\n            const decoded = jwt_decode(token);\r\n            //set current user\r\n            dispatch(setCurrentUser(decoded));\r\n        })\r\n        .catch(err => dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        }))\r\n} \r\n\r\n//set logged in user\r\nexport const setCurrentUser = decoded => {\r\n    return{\r\n        type: SET_CURRRENT_USER,\r\n        payload: decoded\r\n    }\r\n}\r\n\r\n//User Loading\r\nexport const setUserLoading = () => {\r\n    return{\r\n        type: USER_LOADING\r\n    }\r\n}\r\n\r\n//Log User Out\r\nexport const logoutUser = () => dispatch => {\r\n    //remove token from local storage\r\n    localStorage.removeItem(\"jwtToken\");\r\n    //reove auth header from future requests\r\n    setAuthToken(false)\r\n    //set curent user to empty object which will set isUserAuthenticated to fale\r\n    dispatch(setCurrentUser({}));\r\n}"]},"metadata":{},"sourceType":"module"}